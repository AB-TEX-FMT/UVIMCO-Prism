@page
@model ReportsDataModel
@{
    ViewBag.Title = "Reports page";
    //var user = await UserManager.GetUserAsync(User);
}

@* Display any error messages *@
<partial name="_ErrorMessagePartial" for="@Model.ErrorMessage" />
@if (!Model.HasError)
{
    <div class="container" style="margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-left:0px; padding-right: 0px; width: 100%">
        <div class="col-md-12">
            <div class="row view-menubar">
                <div class="col-md-4">
                </div>
                <div class="col-md-4">
                    <h3 class="text-center">@Model.Report.ReportMetaData.ReportTitle</h3>
                </div>
            </div>
            <div class="row">
                @*<div class="col-2"></div>*@
                <div class="col-12 text-center">
                    @Model.Report.ReportMetaData.ReportHeader
                </div>
                @*<div class="col-2"></div>*@
            </div>
            @foreach (ComponentMetaData componentMetaData in Model.Components)
            {
                //Add additional component types here
                if (componentMetaData.ComponentType == ComponentMetaData.ComponentTypeValue.Table)
                {
                    <div class="row">
                        <div class="col-1"></div>
                        <div class="col-10 text-center" id="dvComponent" @componentMetaData.ComponentTitle>
                            @{await Html.RenderPartialAsync("_ComponentTableView", componentMetaData);}
                            <hr />
                        </div>
                        <div class="col-1"></div>
                    </div>
                }
                else if (componentMetaData.ComponentType == ComponentMetaData.ComponentTypeValue.Line)
                {
                    <div class="row">
                        <div class="col-1"></div>
                        <div class="col-10 text-center" id="dvComponent" @componentMetaData.ComponentTitle>
                            @{await Html.RenderPartialAsync("_ComponentChartLineView", componentMetaData);}
                            <hr />
                        </div>
                        <div class="col-1"></div>
                    </div>
                }
                else if (componentMetaData.ComponentType == ComponentMetaData.ComponentTypeValue.Pie)
                {
                    <div class="row">
                        <div class="col-1"></div>
                        <div class="col-10 text-center" id="dvComponent" @componentMetaData.ComponentTitle>
                            @{await Html.RenderPartialAsync("_ComponentChartPieView", componentMetaData);}
                            <hr />
                        </div>
                        <div class="col-1"></div>
                    </div>
                }
                else if (componentMetaData.ComponentType == ComponentMetaData.ComponentTypeValue.Bar)
                {
                    <div class="row">
                        <div class="col-1"></div>
                        <div class="col-10 text-center" id="dvComponent" @componentMetaData.ComponentTitle>
                            @{await Html.RenderPartialAsync("_ComponentChartBarView", componentMetaData);}
                            <hr />
                        </div>
                        <div class="col-1"></div>
                    </div>
                }
                else if (componentMetaData.ComponentType == ComponentMetaData.ComponentTypeValue.Column)
                {
                    <div class="row">
                        <div class="col-1"></div>
                        <div class="col-10 text-center" id="dvComponent" @componentMetaData.ComponentTitle>
                            @{await Html.RenderPartialAsync("_ComponentChartColumnView", componentMetaData);}
                            <hr />
                        </div>
                        <div class="col-1"></div>
                    </div>
                }
                else if (componentMetaData.ComponentType == ComponentMetaData.ComponentTypeValue.Area)
                {
                    <div class="row">
                        <div class="col-1"></div>
                        <div class="col-10 text-center" id="dvComponent" @componentMetaData.ComponentTitle>
                            @{await Html.RenderPartialAsync("_ComponentChartAreaView", componentMetaData);}
                            <hr />
                        </div>
                        <div class="col-1"></div>
                    </div>
                }
            }
            <div class="row">
                <div class="col-2"></div>
                <div class="col-8 text-center">
                    @Model.Report.ReportMetaData.ReportFootNote
                </div>
                <div class="col-2"></div>
            </div>
        </div>
    </div>
}

<script>
    // Switch between table and chart view
    function switchView(type, GUID) {
        switch (type) {
            case "table":
                $('#table_div_' + GUID).show();
                $('#chart_div_' + GUID).hide();
                break;
            case "chart":
                $('#table_div_' + GUID).hide();
                $('#chart_div_' + GUID).show();
                break;
        }
    };

    function drawTableChart(GUID, _callBack) {
        //alert("TableChart - GUID: " + GUID + " divName: " + 'table_div_' + GUID);
        $.ajax({
            "url": "/ReportsDataView/" + GUID + "/TableComponentJSON",
            "dataType": "json",
            "success": function (response) {
                var dataObj;
                var colsObj;
                var chartObj;
                var tableObj;
                try {
                    dataObj = JSON.parse(response.data); // Parse a string into JSON
                    colsObj = JSON.parse(response.columns); // Parse a string into JSON
                    chartObj = JSON.parse(response.chartOptions); // Parse a string into JSON
                    tableObj = JSON.parse(response.tableOptions); // Parse a string into JSON
                } catch (ex) {
                    console.error(ex);
                }
                
                // Create the data table.
                var dataTable = new google.visualization.DataTable();

                colsObj.forEach(element => {
                    var id;
                    var role;
                    var pattern;
                    var columnFormat;
                    switch (element.format) {
                        case 'Percent':
                            columnFormat = 'number';
                            var pattern = new google.visualization.NumberFormat(
                                { pattern: '#,###%', negativeColor: 'red', negativeParens: true });
                            break;
                        case 'Decimal':
                            columnFormat = 'number';
                            var pattern = new google.visualization.NumberFormat(
                                { pattern: '#,###.##', negativeColor: 'red', negativeParens: true });
                            break;
                        case 'Int':
                            columnFormat = 'number';
                            break;
                        case 'Currency':
                            columnFormat = 'number';
                            var pattern = new google.visualization.NumberFormat(
                                { prefix: '$', negativeColor: 'red', negativeParens: true });
                            break;
                        case 'Date':
                            columnFormat = 'date';
                            break;
                        case 'Bool':
                            columnFormat = 'boolean';
                            break;
                        default: //string
                            columnFormat = 'string'
                            break;
                    }
                    dataTable.addColumn(columnFormat, element.name, id, role, pattern)
                });

                dataObj.forEach(element => dataTable.addRow(Object.values(element)));


                var table = new google.visualization.Table(document.getElementById('table_div_' + GUID));
                table.draw(dataTable, { showRowNumber: false, width: '100%', height: '100%' });

                google.visualization.events.addListener(table, 'select', function () {
                    var row = table.getSelection()[0].row;
                    alert('You selected ' + dataTable.getValue(row, 0));
                });

                _callBack(dataTable, chartObj);
            }
        });
    }

    //#################
    // Callback that creates and populates a data table,
    // instantiates the chart, passes in the data and
    // draws it.
    function drawLineChart(GUID) {
        //alert("LineChart - GUID: " + GUID + " divName: " + 'chart_div_' + GUID);
        // Create the data table.
        var data = google.visualization.arrayToDataTable([
            ['Year', 'Sales', 'Expenses'],
            ['2004', 1000, 400],
            ['2005', 1170, 460],
            ['2006', 660, 1120],
            ['2007', 1030, 540]
        ]);

        var options = {
            title: 'Company Performance',
            curveType: 'function',
            legend: { position: 'bottom' }
        };

        var chart_div = document.getElementById('chart_div_' + GUID);
        var chart = new google.visualization.LineChart(chart_div);

        chart.draw(data, options);
    }

    //#################
    // Callback that creates and populates a data table,
    // instantiates the chart, passes in the data and
    // draws it.
    function drawBarChart(GUID) {
        //alert("LineChart - GUID: " + GUID + " divName: " + 'chart_div_' + GUID);
        var data = google.visualization.arrayToDataTable([
            ['Year', 'Sales', 'Expenses', 'Profit'],
            ['2014', 1000, 400, 200],
            ['2015', 1170, 460, 250],
            ['2016', 660, 1120, 300],
            ['2017', 1030, 540, 350]
        ]);

        var options = {
            chart: {
                title: 'Company Performance',
                subtitle: 'Sales, Expenses, and Profit: 2014-2017',
            },
            bars: 'horizontal' // Required for Material Bar Charts.
        };

        var chart_div = document.getElementById('chart_div_' + GUID);
        var chart = new google.charts.Bar(chart_div);

        chart.draw(data, google.charts.Bar.convertOptions(options));
    }

    //#################
    // Callback that creates and populates a data table,
    // instantiates the chart, passes in the data and
    // draws it.
    function drawPieChart(GUID) {
        //alert("PieChart1 - GUID: " + GUID + " divName: " + 'chart_div_' + GUID);
        drawTableChart(GUID, function (dataTable, chartObj) {

            var legendAlignment;
            var legendLocation;
            switch (chartObj.LegendAlignment) {
                case 0:
                    legendAlignment = 'start'
                    break;
                case 1:
                    legendAlignment = 'center'
                    break;
                case 2:
                    legendAlignment = 'end'
                    break;
                default:
                    legendAlignment = 'center'
                    break;
            }
            switch (chartObj.LegendLocation) {
                case 0:
                    legendLocation = 'top'
                    break;
                case 1:
                    legendLocation = 'bottom'
                    break;
                case 2:
                    legendLocation = 'left'
                    break;
                case 3:
                    legendLocation = 'right'
                    break;
                case 4:
                    legendLocation = 'none'
                    break;
                case 5:
                    legendLocation = 'labeled'
                    break;
                default:
                    legendLocation = 'top'
                    break;
            }
            alert(chartObj.LegendTextColor);
            // Set chart options
            var options = {
                title: chartObj.Title,
                width: '100%',
                height: '100%',
                is3D: chartObj.Is3D,
                legend: {
                    alignment: legendAlignment,
                    position: legendLocation,
                    color: chartObj.LegendTextColor,
                    fontName: chartObj.LegendTextFontName,
                    fontSize: chartObj.LegendTextFontSize,
                    bold: chartObj.LegendTextFontBold,
                    italic: chartObj.LegendTextFontItalic
                },
                pieHole: chartObj.PieHole,
                enableInteractivity: chartObj.EnableInteractivity,

            };

            var chart_div = document.getElementById('chart_div_' + GUID);
            var chart = new google.visualization.PieChart(chart_div);

            // Wait for the chart to finish drawing before calling the getImageURI() method.
            google.visualization.events.addListener(chart, 'ready', function () {
                chart_div.innerHTML = '<img src="' + chart.getImageURI() + '">';
                console.log(chart_div.innerHTML);
            });
            // Instantiate and draw our chart, passing in some options.
            chart.draw(dataTable, options);
        });  
    }

    //#################
    // Callback that creates and populates a data table,
    // instantiates the chart, passes in the data and
    // draws it.
    function drawColumnChart(GUID) {
        //alert("PieChart - GUID: " + GUID + " divName: " + 'chart_div_' + GUID);
        // Create the data table.
        var data = google.visualization.arrayToDataTable([
            ['Sector', 'Tech', 'Medical', 'Aerospace', 'Agriculture',
                'Prec. Metals', 'Off Shore', { role: 'annotation' }],
            ['2017', 10, 24, 20, 32, 18, 5, ''],
            ['2018', 16, 22, 23, 30, 16, 9, ''],
            ['2019', 28, 19, 29, 30, 12, 13, '']
        ]);

        var options = {
            width: 600,
            height: 400,
            legend: { position: 'top', maxLines: 3 },
            bar: { groupWidth: '75%' },
            isStacked: true,
        };

        var chart_div = document.getElementById('chart_div_' + GUID);

        // Wait for the chart to finish drawing before calling the getImageURI() method.
        //google.visualization.events.addListener(chart, 'ready', function () {
        //    chart_div.innerHTML = '<img src="' + chart.getImageURI() + '">';
        //    //console.log(chart_div.innerHTML);
        //});
        // Instantiate and draw our chart, passing in some options.
        var chart = new google.visualization.ColumnChart(chart_div);
        chart.draw(data, options);
    }

    //#################
    // Callback that creates and populates a data table,
    // instantiates the chart, passes in the data and
    // draws it.
    function drawAreaChart(GUID) {
        //alert("PieChart - GUID: " + GUID + " divName: " + 'chart_div_' + GUID);
        // Create the data table.
        var data = google.visualization.arrayToDataTable([
            ['Year', 'Sales', 'Expenses'],
            ['2013', 1000, 400],
            ['2014', 1170, 460],
            ['2015', 660, 1120],
            ['2016', 1030, 540]
        ]);

        var options = {
            title: 'Company Performance',
            hAxis: { title: 'Year', titleTextStyle: { color: '#333' } },
            vAxis: { minValue: 0 }
        };

        var chart_div = document.getElementById('chart_div_' + GUID);

        // Wait for the chart to finish drawing before calling the getImageURI() method.
        //google.visualization.events.addListener(chart, 'ready', function () {
        //    chart_div.innerHTML = '<img src="' + chart.getImageURI() + '">';
        //    //console.log(chart_div.innerHTML);
        //});
        // Instantiate and draw our chart, passing in some options.
        var chart = new google.visualization.AreaChart(chart_div);
        chart.draw(data, options);
    }
</script>